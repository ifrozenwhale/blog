<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/05/26/xiang-mu-zhu-ye/"/>
      <url>2021/05/26/xiang-mu-zhu-ye/</url>
      
        <content type="html"><![CDATA[<div class="typora-export-content"><div id="write" class=""><p>&nbsp;</p><blockquote><p><a href="https://github.com/ifrozenwhale"><span>Github 地址</span></a></p></blockquote><h1 id="记录成长"><span>记录成长</span></h1><h2 id="编程练习"><span>编程练习</span></h2><h3 id="共享网络画板"><span>共享网络画板</span></h3><p><span>一个网络画板，支持本地或者联机同步绘图，多种图形（任意曲线、圆点、直线、矩形、三角形），支持套索工具，样式填充、修改，形状调整、移动，支持 undo 与 redo，支持保存和导出图片等。</span></p><p><a href="./../gong-xiang-wang-luo-hua-ban/"><span>博文地址</span></a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1587700600198.png" referrerpolicy="no-referrer" alt="画板主页"></p><p>&nbsp;</p><h3 id="文件管理器"><span>文件管理器</span></h3><p><span>使用 Java 实现，支持文件树和文件列表，支持文件夹创建、删除、复制、粘贴、加密解密、压缩解压。</span></p><p><a href="./../file-manager"><span>博文地址</span></a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229853020.png" referrerpolicy="no-referrer" alt="文件主页"></p><p>&nbsp;</p><h3 id="经典小游戏"><span>经典小游戏</span></h3><p><span>扫雷，贪吃蛇，五子棋，计算器</span></p><p><a href="https://github.com/ifrozenwhale/classic_game" target="_blank" class="url">https://github.com/ifrozenwhale/classic_game</a></p><h3 id="atm-模拟"><span>ATM 模拟</span></h3><p><a href="https://github.com/ifrozenwhale/Easy-ATM" target="_blank" class="url">https://github.com/ifrozenwhale/Easy-ATM</a></p><h3 id="基于-cas-的单点登录系统"><span>基于 CAS 的单点登录系统</span></h3><p><a href="https://github.com/ifrozenwhale/JAVAEE_SSO" target="_blank" class="url">https://github.com/ifrozenwhale/JAVAEE_SSO</a></p><h3 id="基于-servlet-的-mvc-框架实现"><span>基于 servlet 的 MVC 框架实现</span></h3><p><a href="https://github.com/ifrozenwhale/myspringmvc" target="_blank" class="url">https://github.com/ifrozenwhale/myspringmvc</a></p><h2 id="科创与开发项目"><span>科创与开发项目</span></h2><h3 id="基于数据挖掘的编程助手研究"><span>基于数据挖掘的编程助手研究</span></h3><p><span>前端（微信小程序）</span><a href="https://github.com/ifrozenwhale/wecode" target="_blank" class="url">https://github.com/ifrozenwhale/wecode</a></p><p><span>后端（Java）</span><a href="https://github.com/ifrozenwhale/wecode-backend" target="_blank" class="url">https://github.com/ifrozenwhale/wecode-backend</a></p><h3 id="基于树莓派的生活垃圾智能分类系统"><span>基于树莓派的生活垃圾智能分类系统</span></h3><p><a href="https://github.com/ifrozenwhale/raspberry-garbage-classfier" target="_blank" class="url">https://github.com/ifrozenwhale/raspberry-garbage-classfier</a></p><h3 id="基于百度api的人脸分析和轻社交"><span>基于百度API的人脸分析和轻社交</span></h3><p><span>前端（Vue）</span><a href="https://github.com/ifrozenwhale/cquface-frontend" target="_blank" class="url">https://github.com/ifrozenwhale/cquface-frontend</a></p><p><span>后端（Django）</span><a href="https://github.com/ifrozenwhale/cquface" target="_blank" class="url">https://github.com/ifrozenwhale/cquface</a></p><h2 id="课程实践"><span>课程实践</span></h2><h3 id="组成原理--5级流水线多周期-cpu-的实现"><span>组成原理 | 5级流水线多周期 CPU 的实现</span></h3><p><a href="https://github.com/ifrozenwhale/mips_core" target="_blank" class="url">https://github.com/ifrozenwhale/mips_core</a></p><h3 id="计算机网络--ethernetipv4-udp-协议以及-ip-ip-tunnel-隧道协议实现"><span>计算机网络 | Ethernet、IPv4 、udp 协议以及 IP-IP Tunnel 隧道协议实现</span></h3><p><a href="https://github.com/ifrozenwhale/network-ipv4-udp" target="_blank" class="url">https://github.com/ifrozenwhale/network-ipv4-udp</a></p><h3 id="编译原理--简单-c-语言子集的玩具编译器"><span>编译原理 | 简单 C 语言子集的玩具编译器</span></h3><p><a href="https://github.com/ifrozenwhale/Easy-C-Compiler" target="_blank" class="url">https://github.com/ifrozenwhale/Easy-C-Compiler</a></p><h3 id="数据库系统--简单关系数据库元数据管理器"><span>数据库系统 | 简单关系数据库元数据管理器</span></h3><p><a href="https://github.com/ifrozenwhale/metadata-manager" target="_blank" class="url">https://github.com/ifrozenwhale/metadata-manager</a></p><h3 id="数字逻辑--密码锁"><span>数字逻辑 | 密码锁</span></h3><p><a href="https://github.com/ifrozenwhale/digital-logic" target="_blank" class="url">https://github.com/ifrozenwhale/digital-logic</a></p><h2 id="大数据与机器学习"><span>大数据与机器学习</span></h2><h3 id="基于-spark-的电影推荐和分析系统"><span>基于 Spark 的电影推荐和分析系统</span></h3><p><a href="https://github.com/ifrozenwhale/bigdata-movie-recommend" target="_blank" class="url">https://github.com/ifrozenwhale/bigdata-movie-recommend</a></p><h3 id="最优化方法"><span>最优化方法</span></h3><p><a href="https://github.com/ifrozenwhale/Optimization_algorithm" target="_blank" class="url">https://github.com/ifrozenwhale/Optimization_algorithm</a></p><h3 id="机器学习算法实现"><span>机器学习算法实现</span></h3><p><a href="https://github.com/ifrozenwhale/machine-learning-code" target="_blank" class="url">https://github.com/ifrozenwhale/machine-learning-code</a></p><h3 id="大数据分析处理"><span>大数据分析处理</span></h3><p><a href="https://github.com/ifrozenwhale/bigdata-homework/blob/master/README.md" target="_blank" class="url">https://github.com/ifrozenwhale/bigdata-homework/blob/master/README.md</a></p><h3 id="数学建模"><span>数学建模</span></h3><p><span>音乐影响网络 </span><a href="https://github.com/ifrozenwhale/2021icm-problemD" target="_blank" class="url">https://github.com/ifrozenwhale/2021icm-problemD</a></p><p><span>卢浮宫计算模拟 </span><a href="https://github.com/ifrozenwhale/2019icm-problemD" target="_blank" class="url">https://github.com/ifrozenwhale/2019icm-problemD</a></p><h2 id="其他"><span>其他</span></h2><h3 id="不等圆的不重叠随机排列"><span>不等圆的不重叠随机排列</span></h3><p><a href="https://github.com/ifrozenwhale/non-overlapping-circle" target="_blank" class="url">https://github.com/ifrozenwhale/non-overlapping-circle</a></p><h3 id="自定义轮廓的随机纹路生成"><span>自定义轮廓的随机纹路生成</span></h3><p><a href="https://github.com/ifrozenwhale/randomPicture" target="_blank" class="url">https://github.com/ifrozenwhale/randomPicture</a></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>部分项目主页</title>
      <link href="2021/05/26/file-manager/"/>
      <url>2021/05/26/file-manager/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/ifrozenwhale/file_manager">https://github.com/ifrozenwhale/file_manager</a></p><h1 id="文件管理器"><a href="#文件管理器" class="headerlink" title="文件管理器"></a>文件管理器</h1><h2 id="各模块功能实现"><a href="#各模块功能实现" class="headerlink" title="各模块功能实现"></a>各模块功能实现</h2><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ul><li><h4 id="界面跳转："><a href="#界面跳转：" class="headerlink" title="界面跳转："></a><strong>界面跳转：</strong></h4></li></ul><ol><li>后退，逐级返回到父级目录。</li><li>前进，按照后退的顺序依次进入子目录。</li><li>当前目录路径显示，输入目录地址进行跳转。</li></ol><ul><li><h4 id="界面显示："><a href="#界面显示：" class="headerlink" title="界面显示："></a><strong>界面显示：</strong></h4></li></ul><ol><li>文件目录树显示（只显示文件夹）。</li><li>文件列表显示（只显示当前目录下的文件夹和文件），带有系统图标。</li><li>点击文件树中的结点，在文件列表同步显示。</li></ol><ul><li><h4 id="选择与打开"><a href="#选择与打开" class="headerlink" title="选择与打开"></a><strong>选择与打开</strong></h4></li></ul><ol><li>支持多选，选中文件高亮显示，点击空白区域取消选中。</li><li>单击文件夹进入，单击文件打开应用。</li></ol><ul><li><h4 id="右键选中文件"><a href="#右键选中文件" class="headerlink" title="右键选中文件"></a><strong>右键选中文件</strong></h4></li></ul><ol><li>批量复制，包括所有子目录和文件。</li><li>批量压缩，格式为zip，将多个文件压缩成一个，自定义命名。</li><li>单文件加密，自定义加密密钥。</li></ol><ul><li><h4 id="右键空白区域"><a href="#右键空白区域" class="headerlink" title="右键空白区域"></a><strong>右键空白区域</strong></h4></li></ul><ol><li>创建文件夹，自定义命名；</li><li>批量粘贴，粘贴的目录不能是源文件目录的子目录；</li><li>批量解压，解压到当前目录下。</li><li>单文件解密，输入加密密钥，若密钥不正确，加密后的文件仍无法打开。</li></ol><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p>主要是<code>FileModel</code>的实现</p><h3 id="数据记录"><a href="#数据记录" class="headerlink" title="数据记录"></a><strong>数据记录</strong></h3><ul><li>由<code>List&lt;File&gt; defaultListModel</code>和<code>File currentFile</code>负责记录当前目录和目录下的文件、文件夹。</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h3><ul><li><code>initRoots</code>方法，将磁盘目录，如<code>C:\</code>，<code>D:\</code>，<code>E:\</code>添加进文件列表。</li></ul><h3 id="文件更新"><a href="#文件更新" class="headerlink" title="文件更新"></a><strong>文件更新</strong></h3><ul><li><code>updateModels(File file)</code>方法，将当前文件设为<code>file</code>，并将其当前目录层级下的文件（夹）添加进文件列表。</li></ul><h3 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a><strong>前进和后退</strong></h3><ol><li>由<code>redoStack</code>负责记录操作路径，undo时，得到父级目录下文件和文件夹，更新文件列表，并将文件压入<code>redoStack</code>。</li><li>redo时，弹出栈顶文件，更新当前文件列表。</li><li>细节，如果父级为<code>null</code>，说明当前是磁盘根目录，如<code>D:\</code>，则调用初始化方法<code>initRoots</code>。</li></ol><h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a><strong>文件复制</strong></h3><ol><li>由<code>copySources</code>负责存储粘贴板中的文件。</li><li>选中文件后，加入到<code>copySources</code>中。</li><li>粘贴时，判断是文件，还是文件夹<ol><li>如果是文件，则进行文件复制。</li><li>如果是文件夹，递归调用。</li></ol></li><li>异常处理，粘贴的目录不能是源目录的子目录，由<code>isParent</code>进行判断。</li></ol><h3 id="创建和删除"><a href="#创建和删除" class="headerlink" title="创建和删除"></a><strong>创建和删除</strong></h3><ol><li>如果不存在，则创建。</li><li>递归删除，由<code>deleteHelp</code>负责递归，如果删除的是文件夹，就递归调用，最终删除根文件。</li><li>对选中的文件遍历执行，批量删除。</li></ol><h3 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a><strong>压缩和解压</strong></h3><ol><li>对于文件，直接压缩。</li><li>对于文件夹，递归压缩。</li></ol><h3 id="文件加密和解密"><a href="#文件加密和解密" class="headerlink" title="文件加密和解密"></a><strong>文件加密和解密</strong></h3><ol><li>对文件读取字节内容，与密钥进行简单的异或加密。</li><li>加密后得到新文件，删除原始文件，并将新文件重命名为原文件。（也可以不删除，防止出问题，重要文件）</li><li>解密的时候，与加密过程相同，输入密钥，读取文件，异或解密。</li></ol><h3 id="取消选中"><a href="#取消选中" class="headerlink" title="取消选中"></a><strong>取消选中</strong></h3><ol><li><p>重写<code>locationToIndex</code>函数，判断点击的位置是否有效</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> index = <span class="keyword">super</span>.locationToIndex(location);        </span><br><span class="line"><span class="keyword">if</span> (index != -<span class="number">1</span> &amp;&amp; !getCellBounds(index, index).contains(location))<span class="keyword">return</span> -<span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="样式渲染"><a href="#样式渲染" class="headerlink" title="样式渲染"></a><strong>样式渲染</strong></h3><ol><li>实现<code>FileListCellRenderer</code>类继承<code>DefaultListCellRenderer</code></li><li>设置图标，设置显示信息，磁盘根目录使用<code>getPath()</code>，其他目录使用<code>getName()</code>。</li><li>选中设置颜色，取消选中恢复之前的颜色。</li></ol><h3 id="文件树展开"><a href="#文件树展开" class="headerlink" title="文件树展开"></a><strong>文件树展开</strong></h3><ol><li>实现<code>TreeSelectionListener</code>接口，采用延迟加载，即每次点击展开时再加载目录文件。</li></ol><h2 id="软件调试分析"><a href="#软件调试分析" class="headerlink" title="软件调试分析"></a>软件调试分析</h2><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><ol><li><p>启动<code>App</code>类的<code>main</code>函数</p></li><li><p>在<code>FileController</code>初始化的时候，完成对数据成员的初始化，包括添加事件监听，更新初始视图。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileController</span><span class="params">(App app, FileModel fileModel, FileTreeModel treeModel)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.fileDisplay = app.getFileDisplay();</span><br><span class="line">        <span class="keyword">this</span>.app = app;</span><br><span class="line">        <span class="keyword">this</span>.fileModel = fileModel;</span><br><span class="line">        <span class="keyword">this</span>.filesTree = app.getFilesTree();</span><br><span class="line">        <span class="keyword">this</span>.treeModel = treeModel;</span><br><span class="line">        <span class="comment">// 添加事件监听</span></span><br><span class="line">        fileDisplay.addCopyListener(<span class="keyword">new</span> CopyListener());</span><br><span class="line">        fileDisplay.addCreateListener(<span class="keyword">new</span> CreateFileListener());</span><br><span class="line">        fileDisplay.addPasteListener(<span class="keyword">new</span> PasteListener());</span><br><span class="line">        fileDisplay.addUnzipListener(<span class="keyword">new</span> UnZipListener());</span><br><span class="line">        fileDisplay.addZipListener(<span class="keyword">new</span> ZipListener());</span><br><span class="line">        fileDisplay.addDeleteListener(<span class="keyword">new</span> DeleteListener());</span><br><span class="line">        fileDisplay.addMyMouseListener(<span class="keyword">new</span> FileClickListener());</span><br><span class="line">        fileDisplay.addEncodeListener(<span class="keyword">new</span> EncodeListener());</span><br><span class="line">        fileDisplay.addDecodeListener(<span class="keyword">new</span> DecodeListener());</span><br><span class="line">        app.addUndoListener(<span class="keyword">new</span> UndoListener());</span><br><span class="line">        app.addRedoListener(<span class="keyword">new</span> RedoListener());</span><br><span class="line">        app.addGoListener(<span class="keyword">new</span> GoListener());</span><br><span class="line">        filesTree.addTreeSelectionListener(<span class="keyword">new</span> FileTreeSelListener());</span><br><span class="line">        filesTree.setRootVisible(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 初始化主视图</span></span><br><span class="line">        fileDisplay.updateView(fileModel.getDefaultListModel());</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li><li><p>监听到事件发生，调用<code>model</code>和<code>view</code>进行逻辑实现并更新视图。例如，展开文件目录树时，需要对三部分视图进行更新（文件树，文件列表，url地址栏）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileTreeSelListener</span> <span class="keyword">implements</span> <span class="title">TreeSelectionListener</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueChanged</span><span class="params">(TreeSelectionEvent e)</span> </span>{</span><br><span class="line">        File file = filesTree.getCurrentFile(); <span class="comment">// 得到点击的文件结点</span></span><br><span class="line">        <span class="comment">// 加载目录树</span></span><br><span class="line">        filesTree.loadingTree((DefaultMutableTreeNode)</span><br><span class="line">        filesTree.getLastSelectedPathComponent(), treeModel.getFiles(file));</span><br><span class="line">        <span class="comment">// 更新文件数据模型</span></span><br><span class="line">        fileModel.updateModels(file);</span><br><span class="line">        <span class="comment">// 更新文件列表视图</span></span><br><span class="line">        fileDisplay.updateView(fileModel.getDefaultListModel());</span><br><span class="line">        <span class="comment">// 更新url地址显示</span></span><br><span class="line">        String url = fileModel.getUrl();</span><br><span class="line">        app.updateUrl(url);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再如，undo操作时，<code>model</code>进行undo，更新数据，然后视图更新</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UndoListener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>{</span><br><span class="line">        fileModel.undo(); <span class="comment">// 数据模型更新</span></span><br><span class="line">        fileDisplay.updateView(fileModel.getDefaultListModel()); <span class="comment">// 列表视图更新</span></span><br><span class="line">        String url = fileModel.getUrl(); </span><br><span class="line">        app.updateUrl(url); <span class="comment">// url地址栏更新</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h2><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229881679.png" alt="主界面"></p><ul><li>上侧可以后撤、前进，url地址栏显示</li><li>左侧目录树展开，并同步更新右侧文件列表</li></ul><h3 id="文件及文件夹拷贝"><a href="#文件及文件夹拷贝" class="headerlink" title="文件及文件夹拷贝"></a>文件及文件夹拷贝</h3><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229881679.png" alt="拷贝"></p><p>右键粘贴，将子目录下所有文件（夹）粘贴</p><h3 id="解压压缩"><a href="#解压压缩" class="headerlink" title="解压压缩"></a>解压压缩</h3><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229881679.png" alt="压缩"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> 专业基础 </tag>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共享画板</title>
      <link href="2021/05/26/gong-xiang-wang-luo-hua-ban/"/>
      <url>2021/05/26/gong-xiang-wang-luo-hua-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="共享网络画板"><a href="#共享网络画板" class="headerlink" title="共享网络画板"></a>共享网络画板</h1><p>项目地址：<a href="https://github.com/ifrozenwhale/share_drawing">https://github.com/ifrozenwhale/share_drawing</a></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ol><li>客户端为 client 包下的 AppClient1 和 AppClient2</li><li>服务端为 server 包下的 Server（默认配置了本地启动，端口号）</li><li>其他类的 main 函数为测试函数</li></ol><h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><h3 id="基本图形与操作"><a href="#基本图形与操作" class="headerlink" title="基本图形与操作"></a>基本图形与操作</h3><ul><li><p>任意曲线（Free Line）、圆点（Dot）、直线（Line）、矩形（Rectangle）、三角形（Triangle）</p></li><li><p>套索工具（Select）</p><ul><li>矩形区域选择框：支持一个或多个图形</li></ul></li><li><p>变形（Reshape）</p><ul><li>选中图形的控制点，改变图形形状</li></ul></li><li><p>移动（Move）</p><ul><li>以鼠标按下为移动中心，进行拖动</li><li>可同时移动或多个图形</li></ul></li><li><p>样式修改（Style）</p><ul><li>线条颜色（Line Color）</li><li>线条粗细（Stroke）</li></ul></li><li><p>颜色填充（Fill）</p></li></ul><h3 id="图层（非网络模式）"><a href="#图层（非网络模式）" class="headerlink" title="图层（非网络模式）"></a>图层（非网络模式）</h3><ul><li>图层选择区域，可以切换图层和图层显示</li><li>图层创建和删除</li><li>图层操作</li></ul><h3 id="重绘、清除"><a href="#重绘、清除" class="headerlink" title="重绘、清除"></a>重绘、清除</h3><ul><li>抹除（Remove）：可同时抹除一个或者多个图形</li><li>清空（Clear）</li><li>撤销（Undo）</li><li>重做（Redo）</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul><li>画板背景色（Background Color）</li><li>默认线条颜色（Default Color）</li><li>默认线条粗细（Default Stroke）</li></ul><h3 id="保存、导出、打开"><a href="#保存、导出、打开" class="headerlink" title="保存、导出、打开"></a>保存、导出、打开</h3><ul><li>保存设置（Global Configuration）<ul><li>下次启动程序恢复已保存的全局设置</li></ul></li><li>保存图形（Save Shape）<ul><li>将图形数据保存为数据文件</li></ul></li><li>导出<ul><li>利用套索工具，选择画板的区域</li><li>导出为JPG图片</li></ul></li><li>打开<ul><li>新建画板</li><li>从保存的数据文件中加载画板信息</li></ul></li></ul><h3 id="同步绘图"><a href="#同步绘图" class="headerlink" title="同步绘图"></a>同步绘图</h3><ul><li>共享画板视图</li><li>共享图形编辑权限</li></ul><h2 id="UI-界面"><a href="#UI-界面" class="headerlink" title="UI 界面"></a>UI 界面</h2><ul><li>主窗口</li></ul><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image1.png" alt="主窗口"></p><ul><li>菜单栏</li></ul><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image2.png" alt="菜单栏"></p><ul><li>Undo操作时，如果索引无效，则进行提示</li></ul><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image7.png" alt="undo 异常操作提示"></p><ul><li>导出图片时，选择保存文件的路径。</li></ul><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image11.png" alt="导出图片"></p><ul><li>启动应用程序时，可以选择是否加入服务器，共享绘图板，进行同步绘图。需要注意的是，服务器不退出，保留着绘图信息，即使客户端退出，重新加入，依旧可以初始化为最新的视图并进行编辑。</li><li>加入服务器时，输入服务器ip及端口号，格式为<code>xx.xx.xx.xx:xxxxx</code>。</li><li>如果输入的服务器端口不对或者服务器未启动，则进行提示确认服务器运行；如果输入格式不正确，提示格式错误。</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol><li>free line 为任意线条，dot 为实心圆点，line 为直线，triangle 为等腰三角形，rectangle 为矩形。</li><li>select 为套索工具，绘制矩形。可选中整个图形，可选中图形的顶点，可选中图形的边，可选中1个或者多个图形。</li><li>move 为移动操作。select 选中图形后，以鼠标按下位置为起始点，拖动鼠标进行移动。</li><li>reshape 为变形操作。需通过 select 选中图形的某个顶点，然后点击 reshape 进入变形模式，拖动顶点完成变形。</li><li>style 为样式设置，可以设置颜色和线条粗细。如若未选中图形，则只设置画笔样式；选中图形，则对选中图形进行样式的修改。</li><li>fill 为填充操作。点击 fill 后，选择颜色，再点击图形内部（点中多个，选中最后绘制的图形），完成填充。</li><li>clear 为清空画板。</li><li>remove 为移除图形，需要先 select 选择1个或多个图形，再点击 remove 进行移除。</li><li>undo 和 redo 支持上述所有操作，进行回退和重做。</li><li>File 菜单栏支持导出图片，支持保存为 .shape 数据文件，启动程序时可以打开 .shape 文件。</li><li> Settings 菜单栏 style 支持默认样式的修改，即启动应用后的画笔颜色和粗细；</li><li> Settings 中 background 项为设置画板的背景颜色，此设置将会被保存，下次启动时默认颜色即设置的颜色。</li><li>登录时选择加入服务器，则会同步服务器上的图形数据，进行同步、共享绘图。</li><li>登录时不加入服务器，选择新建画布，则生成空画板；否则选择 .shape 文件初始化画板图形。</li><li>不加入服务器时，可以利用图层分层绘制图形并做一系列的修改。</li></ol><h2 id="类的关系"><a href="#类的关系" class="headerlink" title="类的关系"></a>类的关系</h2><p>Shape 作为数据的抽象基类，实现图形数据的公共方法，Rectangle 等子类完成各自的数据处理操作。</p><p>Graphics 类继承自 java.swingx.JPanel，作为画板，拥有 Shape 数据成员，调用 Shape 及其子类的方法，完成逻辑操作，同时显示图形。</p><p>App类继承自 java.swingx.JFrame，作为主界面类，拥有一系列组件，包括 Graphics 显示图形。</p><p>ErrorView 类继承自 JDialog，以对话框的形式提示。</p><p>StyleConfig 类继承自 JDialog，以对话框的形式供选择。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 网络 </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部分项目主页</title>
      <link href="2021/05/26/xiang-mu-zhu-ye/"/>
      <url>2021/05/26/xiang-mu-zhu-ye/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/ifrozenwhale">Github 地址</a></p></blockquote><h1 id="记录成长"><a href="#记录成长" class="headerlink" title="记录成长"></a>记录成长</h1><h2 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h2><h3 id="共享网络画板"><a href="#共享网络画板" class="headerlink" title="共享网络画板"></a>共享网络画板</h3><p>一个网络画板，支持本地或者联机同步绘图，多种图形（任意曲线、圆点、直线、矩形、三角形），支持套索工具，样式填充、修改，形状调整、移动，支持 undo 与 redo，支持保存和导出图片等。</p><p><a href="./../gong-xiang-wang-luo-hua-ban/">博文地址</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1587700600198.png" alt="画板主页"></p><h3 id="文件管理器"><a href="#文件管理器" class="headerlink" title="文件管理器"></a>文件管理器</h3><p>使用 Java 实现，支持文件树和文件列表，支持文件夹创建、删除、复制、粘贴、加密解密、压缩解压。</p><p><a href="./../file-manager">博文地址</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229853020.png" alt="文件主页"></p><h3 id="经典小游戏"><a href="#经典小游戏" class="headerlink" title="经典小游戏"></a>经典小游戏</h3><p>扫雷，贪吃蛇，五子棋，计算器</p><p><a href="https://github.com/ifrozenwhale/classic_game">https://github.com/ifrozenwhale/classic_game</a></p><h3 id="ATM-模拟"><a href="#ATM-模拟" class="headerlink" title="ATM 模拟"></a>ATM 模拟</h3><p><a href="https://github.com/ifrozenwhale/Easy-ATM">https://github.com/ifrozenwhale/Easy-ATM</a></p><h3 id="基于-CAS-的单点登录系统"><a href="#基于-CAS-的单点登录系统" class="headerlink" title="基于 CAS 的单点登录系统"></a>基于 CAS 的单点登录系统</h3><p><a href="https://github.com/ifrozenwhale/JAVAEE_SSO">https://github.com/ifrozenwhale/JAVAEE_SSO</a></p><h3 id="基于-servlet-的-MVC-框架实现"><a href="#基于-servlet-的-MVC-框架实现" class="headerlink" title="基于 servlet 的 MVC 框架实现"></a>基于 servlet 的 MVC 框架实现</h3><p><a href="https://github.com/ifrozenwhale/myspringmvc">https://github.com/ifrozenwhale/myspringmvc</a></p><h2 id="科创与开发项目"><a href="#科创与开发项目" class="headerlink" title="科创与开发项目"></a>科创与开发项目</h2><h3 id="基于数据挖掘的编程助手研究"><a href="#基于数据挖掘的编程助手研究" class="headerlink" title="基于数据挖掘的编程助手研究"></a>基于数据挖掘的编程助手研究</h3><p>前端（微信小程序）<a href="https://github.com/ifrozenwhale/wecode">https://github.com/ifrozenwhale/wecode</a></p><p>后端（Java）<a href="https://github.com/ifrozenwhale/wecode-backend">https://github.com/ifrozenwhale/wecode-backend</a></p><h3 id="基于树莓派的生活垃圾智能分类系统"><a href="#基于树莓派的生活垃圾智能分类系统" class="headerlink" title="基于树莓派的生活垃圾智能分类系统"></a>基于树莓派的生活垃圾智能分类系统</h3><p><a href="https://github.com/ifrozenwhale/raspberry-garbage-classfier">https://github.com/ifrozenwhale/raspberry-garbage-classfier</a></p><h3 id="基于百度API的人脸分析和轻社交"><a href="#基于百度API的人脸分析和轻社交" class="headerlink" title="基于百度API的人脸分析和轻社交"></a>基于百度API的人脸分析和轻社交</h3><p>前端（Vue）<a href="https://github.com/ifrozenwhale/cquface-frontend">https://github.com/ifrozenwhale/cquface-frontend</a></p><p>后端（Django）<a href="https://github.com/ifrozenwhale/cquface">https://github.com/ifrozenwhale/cquface</a></p><h2 id="课程实践"><a href="#课程实践" class="headerlink" title="课程实践"></a>课程实践</h2><h3 id="组成原理-5级流水线多周期-CPU-的实现"><a href="#组成原理-5级流水线多周期-CPU-的实现" class="headerlink" title="组成原理 | 5级流水线多周期 CPU 的实现"></a>组成原理 | 5级流水线多周期 CPU 的实现</h3><p><a href="https://github.com/ifrozenwhale/mips_core">https://github.com/ifrozenwhale/mips_core</a></p><h3 id="计算机网络-Ethernet、IPv4-、udp-协议以及-IP-IP-Tunnel-隧道协议实现"><a href="#计算机网络-Ethernet、IPv4-、udp-协议以及-IP-IP-Tunnel-隧道协议实现" class="headerlink" title="计算机网络 | Ethernet、IPv4 、udp 协议以及 IP-IP Tunnel 隧道协议实现"></a>计算机网络 | Ethernet、IPv4 、udp 协议以及 IP-IP Tunnel 隧道协议实现</h3><p><a href="https://github.com/ifrozenwhale/network-ipv4-udp">https://github.com/ifrozenwhale/network-ipv4-udp</a></p><h3 id="编译原理-简单-C-语言子集的玩具编译器"><a href="#编译原理-简单-C-语言子集的玩具编译器" class="headerlink" title="编译原理 | 简单 C 语言子集的玩具编译器"></a>编译原理 | 简单 C 语言子集的玩具编译器</h3><p><a href="https://github.com/ifrozenwhale/Easy-C-Compiler">https://github.com/ifrozenwhale/Easy-C-Compiler</a></p><h3 id="数据库系统-简单关系数据库元数据管理器"><a href="#数据库系统-简单关系数据库元数据管理器" class="headerlink" title="数据库系统 | 简单关系数据库元数据管理器"></a>数据库系统 | 简单关系数据库元数据管理器</h3><p><a href="https://github.com/ifrozenwhale/metadata-manager">https://github.com/ifrozenwhale/metadata-manager</a></p><h3 id="数字逻辑-密码锁"><a href="#数字逻辑-密码锁" class="headerlink" title="数字逻辑 | 密码锁"></a>数字逻辑 | 密码锁</h3><p><a href="https://github.com/ifrozenwhale/digital-logic">https://github.com/ifrozenwhale/digital-logic</a></p><h2 id="大数据与机器学习"><a href="#大数据与机器学习" class="headerlink" title="大数据与机器学习"></a>大数据与机器学习</h2><h3 id="基于-Spark-的电影推荐和分析系统"><a href="#基于-Spark-的电影推荐和分析系统" class="headerlink" title="基于 Spark 的电影推荐和分析系统"></a>基于 Spark 的电影推荐和分析系统</h3><p><a href="https://github.com/ifrozenwhale/bigdata-movie-recommend">https://github.com/ifrozenwhale/bigdata-movie-recommend</a></p><h3 id="最优化方法"><a href="#最优化方法" class="headerlink" title="最优化方法"></a>最优化方法</h3><p><a href="https://github.com/ifrozenwhale/Optimization_algorithm">https://github.com/ifrozenwhale/Optimization_algorithm</a></p><h3 id="机器学习算法实现"><a href="#机器学习算法实现" class="headerlink" title="机器学习算法实现"></a>机器学习算法实现</h3><p><a href="https://github.com/ifrozenwhale/machine-learning-code">https://github.com/ifrozenwhale/machine-learning-code</a></p><h3 id="大数据分析处理"><a href="#大数据分析处理" class="headerlink" title="大数据分析处理"></a>大数据分析处理</h3><p><a href="https://github.com/ifrozenwhale/bigdata-homework/blob/master/README.md">https://github.com/ifrozenwhale/bigdata-homework/blob/master/README.md</a></p><h3 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h3><p>音乐影响网络 <a href="https://github.com/ifrozenwhale/2021icm-problemD">https://github.com/ifrozenwhale/2021icm-problemD</a></p><p>卢浮宫计算模拟 <a href="https://github.com/ifrozenwhale/2019icm-problemD">https://github.com/ifrozenwhale/2019icm-problemD</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="不等圆的不重叠随机排列"><a href="#不等圆的不重叠随机排列" class="headerlink" title="不等圆的不重叠随机排列"></a>不等圆的不重叠随机排列</h3><p><a href="https://github.com/ifrozenwhale/non-overlapping-circle">https://github.com/ifrozenwhale/non-overlapping-circle</a></p><h3 id="自定义轮廓的随机纹路生成"><a href="#自定义轮廓的随机纹路生成" class="headerlink" title="自定义轮廓的随机纹路生成"></a>自定义轮廓的随机纹路生成</h3><p><a href="https://github.com/ifrozenwhale/randomPicture">https://github.com/ifrozenwhale/randomPicture</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> 专业基础 </tag>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拥有个人博客啦</title>
      <link href="2021/05/19/hello-world/"/>
      <url>2021/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="属于沃若的小窝"><a href="#属于沃若的小窝" class="headerlink" title="属于沃若的小窝"></a>属于沃若的小窝</h1><blockquote><p>好羞耻的标题啊，好像匿名（x，但是你们也不知道我是谁是不是</p></blockquote><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>去年疫情试着在 WordPress 上开了个博客 <a href="https://frozenwhale.wordpress.com/">frozenwhale’s blog</a>，写了三篇博文…然后就鸽了鸽了。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210519202154508.png" alt="WordPress主页"></p><p>后来转战 csdn，但是发了两篇简单的题解后，又咕咕咕了<span class="github-emoji"><span>🐷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210519204249436.png" alt="csdn主页"></p><p>尴尬，怎么还有 3000 的访问量（x，菜鸡的事实被发现了</p><p>自从习惯 google 之后，发现经常搜到一些个人博客，在被各种 lab 折磨的时候给了莫大的参考价值，于是也打算建一个。</p><p>于是今晚上就直接用 hexo 搭了一个个人博客，本来计划托管在 github，但是想到经常登不上 github.io，就部署到了之前做项目嫖的服务器上去了，不得不说，现在整个一套真完善。</p><ul><li>npm 几行命令就可以启动一个 hexo 的博客服务器</li><li>再几行命令装几个插件</li><li>去 github 上逛逛街，套个主题，再个性化定制一下。</li><li>使用 typora 写 markdown 即可，图片存到阿里云的 oss。</li><li>在服务器上开个 git 仓库，hexo d -g 远程推送一下就可以了，真的很方便。</li></ul><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>目前大三，快保研了，最近不会更，希望大四可以分享自己的生活~</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
